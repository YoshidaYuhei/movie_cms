# Generated by Django 2.0.5 on 2019-04-15 14:36

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('icon', models.ImageField(blank=True, null=True, upload_to='icon/')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('portrait', models.ImageField(null=True, upload_to='portrait/')),
                ('history', models.TextField()),
                ('pub_date', models.DateTimeField(default=datetime.datetime(2019, 4, 15, 14, 36, 49, 881329, tzinfo=utc))),
            ],
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('duration', models.DurationField(blank=True, null=True)),
                ('country', models.CharField(max_length=100)),
                ('release_date', models.DateTimeField(null=True)),
                ('awards', models.CharField(max_length=200, null=True)),
                ('pub_date', models.DateTimeField(default=datetime.datetime(2019, 4, 15, 14, 36, 49, 881956, tzinfo=utc))),
                ('cast', models.ManyToManyField(blank=True, default=[1], to='binty.Cast', verbose_name='キャスト')),
            ],
        ),
        migrations.CreateModel(
            name='Director',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('history', models.TextField()),
                ('pub_date', models.DateTimeField(default=datetime.datetime(2019, 4, 15, 14, 36, 49, 881005, tzinfo=utc))),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('pub_date', models.DateTimeField(default=datetime.datetime(2019, 4, 15, 14, 36, 49, 880680, tzinfo=utc))),
            ],
        ),
        migrations.AddField(
            model_name='content',
            name='director',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='binty.Director', verbose_name='監督'),
        ),
        migrations.AddField(
            model_name='content',
            name='genre',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='binty.Genre', verbose_name='ジャンル'),
        ),
        migrations.AddField(
            model_name='user',
            name='good',
            field=models.ManyToManyField(blank=True, default=[1], to='binty.Cast', verbose_name='イイね'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
